"use strict";(self.webpackChunkflex_project_template_docs=self.webpackChunkflex_project_template_docs||[]).push([[577],{19582:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/unpark-interaction-7f47dc937373248e47532b69d38f3572.gif"},22626:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"feature-library/park-interaction","title":"park-interaction","description":"Feature summary","source":"@site/docs/feature-library/park-interaction.md","sourceDirName":"feature-library","slug":"/feature-library/park-interaction","permalink":"/feature-library/park-interaction","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"sidebar_label":"park-interaction","title":"park-interaction"},"sidebar":"tutorialSidebar","previous":{"title":"omni-channel-capacity-management","permalink":"/feature-library/omni-channel-capacity-management"},"next":{"title":"pause-recording","permalink":"/feature-library/pause-recording"}}');var r=n(74848),a=n(28453);const o={sidebar_label:"park-interaction",title:"park-interaction"},s=void 0,c={},d=[{value:"Feature summary",id:"feature-summary",level:2},{value:"ConnieRTC User Experience",id:"conniertc-user-experience",level:2},{value:"Setup and dependencies",id:"setup-and-dependencies",level:2},{value:"How does it work?",id:"how-does-it-work",level:2},{value:"Parked Interactions List details",id:"parked-interactions-list-details",level:3}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"feature-summary",children:"Feature summary"}),"\n",(0,r.jsx)(t.p,{children:"This feature adds a pause/park button to messaging conversations so that while waiting for a response, an agent can be freed up for new work, while also maintaining conversation history. Next time the customer writes a message, if the conversation was parked, it will route through the workflow again for worker assignment, and the history of the conversation will be present when a worker accepts the task."}),"\n",(0,r.jsxs)(t.p,{children:["Furthermore, you have the option to enable the 'Parked Interactions' list, which empowers agents to access and manage parked conversations, with a specific focus on Web Chat and WhatsApp. This list allows agents to efficiently unpark conversations directly from their interface. Details ",(0,r.jsx)(t.a,{href:"#parked-interactions-list-details",children:"here"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"conniertc-user-experience",children:"ConnieRTC User Experience"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Park interaction demo",src:n(40947).A+"",width:"1255",height:"691"})}),"\n",(0,r.jsx)(t.p,{children:"Additional Parked Interactions list"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Unpark interaction demo",src:n(19582).A+"",width:"1496",height:"794"})}),"\n",(0,r.jsx)(t.h2,{id:"setup-and-dependencies",children:"Setup and dependencies"}),"\n",(0,r.jsxs)(t.p,{children:["To enable the parking feature, under your ",(0,r.jsx)(t.code,{children:"flex-config"})," attributes set the ",(0,r.jsx)(t.code,{children:"park_interaction"})," ",(0,r.jsx)(t.code,{children:"enabled"})," flag to ",(0,r.jsx)(t.code,{children:"true"}),". To enable the recent interaction view, set the ",(0,r.jsx)(t.code,{children:"show_list"})," to ",(0,r.jsx)(t.code,{children:"true"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'"park_interaction": {\n    "enabled": true,\n    "show_list": true\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["You may need a different use case then what this plugin does today. For example, currently when the customer writes a message, the task is routed to same workflow as the originally parked task. If you instead need to route back to a specific agent or queue, you can adjust your TaskRouter workflow to use the included ",(0,r.jsx)(t.code,{children:"originalRouting.queueName"}),",",(0,r.jsx)(t.code,{children:"originalRouting.queueSid"}),", and/or ",(0,r.jsx)(t.code,{children:"originalRouting.workerSid"})," task attributes, or you could modify the ",(0,r.jsx)(t.code,{children:"unpark-interaction"})," serverless function to route directly using the queue and worker SIDs (",(0,r.jsx)(t.a,{href:"https://www.twilio.com/docs/flex/developer/conversations/park-an-interaction#add-a-specific-agent-back-to-the-interaction",children:"details for this example here"}),"). Alternatively, if you wish to route the interaction through a Studio flow when the customer replies, you could change the webhook URL in the ",(0,r.jsx)(t.code,{children:"park-interaction"})," serverless function to a Studio flow webhook URL."]}),"\n",(0,r.jsx)(t.h2,{id:"how-does-it-work",children:"How does it work?"}),"\n",(0,r.jsxs)(t.p,{children:["This feature is based in the instructions given on our doc on how to ",(0,r.jsx)(t.a,{href:"https://www.twilio.com/docs/flex/developer/conversations/park-an-interaction",children:"Park an Interaction"}),'. In the legacy ConnieRTC this functionality was known as "long-lived channels".']}),"\n",(0,r.jsx)(t.h3,{id:"parked-interactions-list-details",children:"Parked Interactions List details"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["This feature leverages Sync MapItems to store the state of recently parked interactions","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Non-SMS interactions are stored with a time-to-live (TTL) of 24 hours due to restrictions imposed by third-party platforms"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.li,{children:"Attempting to unpark a closed or failed conversation will result in an error"}),"\n",(0,r.jsxs)(t.li,{children:["While unparking an interaction, the associated Sync MapItem is deleted, for both scenarios (customer or worker-initiated). The ",(0,r.jsx)(t.code,{children:"unpark-interaction"})," serverless function checks if the conversation has ",(0,r.jsx)(t.code,{children:"mapSid"})," and ",(0,r.jsx)(t.code,{children:"mapItemKey"})," attributes, which are only added when it's being parked and the ",(0,r.jsx)(t.code,{children:"show_list"})," option is enabled"]}),"\n",(0,r.jsxs)(t.li,{children:["If the unparking is worker-initiated from the list, ",(0,r.jsx)(t.code,{children:"queue_id"})," and ",(0,r.jsx)(t.code,{children:"worder_sid"})," attributes are added to the request, so the interaction is routed directly to the worker. Otherwise, if customer-initiated, these are not added"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var i=n(96540);const r={},a=i.createContext(r);function o(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:t},e.children)}},40947:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/park-interaction-163ccf9fec10c93e860c2e5809fb9077.gif"}}]);