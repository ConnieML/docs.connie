"use strict";(self.webpackChunkflex_project_template_docs=self.webpackChunkflex_project_template_docs||[]).push([[2416],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var o=t(96540);const a={},r=o.createContext(a);function i(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:n},e.children)}},30644:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"developers/building/flex-hooks/actions","title":"actions","description":"Use an actions hook to register actions in the Flex Actions Framework.","source":"@site/docs/developers/building/flex-hooks/actions.md","sourceDirName":"developers/building/flex-hooks","slug":"/developers/building/flex-hooks/actions","permalink":"/developers/building/flex-hooks/actions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"developer","previous":{"title":"Overview","permalink":"/developers/building/flex-hooks/overview"},"next":{"title":"channels","permalink":"/developers/building/flex-hooks/channels"}}');var a=t(74848),r=t(28453);const i={},l=void 0,s={},c=[];function p(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Use an actions hook to register actions in the ",(0,a.jsx)(n.a,{href:"https://www.twilio.com/docs/flex/developer/ui/use-ui-actions",children:"Flex Actions Framework"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import * as Flex from '@twilio/flex-ui';\n\nimport { FlexActionEvent, FlexAction } from '../../../../types/feature-loader';\n\nexport const actionEvent = FlexActionEvent.before;\nexport const actionName = FlexAction.CompleteTask;\nexport const actionHook = function exampleCompleteTaskHook(flex: typeof Flex, manager: Flex.Manager) {\n  flex.Actions.addListener(`${actionEvent}${actionName}`, async (payload, abortFunction) => {\n    // your code here\n  });\n};\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Supported values for ",(0,a.jsx)(n.code,{children:"actionEvent"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'enum FlexActionEvent {\n  before = "before",\n  after = "after",\n  replace = "replace",\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Supported values for ",(0,a.jsx)(n.code,{children:"actionName"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'enum FlexAction {\n  AcceptTask = "AcceptTask",\n  ApplyTeamsViewFilters = "ApplyTeamsViewFilters",\n  CompleteTask = "CompleteTask",\n  HangupCall = "HangupCall",\n  HoldCall = "HoldCall",\n  UnholdCall = "UnholdCall",\n  HoldParticipant = "HoldParticipant",\n  KickParticipant = "KickParticipant",\n  MonitorCall = "MonitorCall",\n  StopMonitoringCall = "StopMonitoringCall",\n  SelectTask = "SelectTask",\n  SetWorkerActivity = "SetWorkerActivity",\n  StartOutboundCall = "StartOutboundCall",\n  ToggleMute = "ToggleMute",\n  UnholdParticipant = "UnholdParticipant",\n  NavigateToView = "NavigateToView",\n  RejectTask = "RejectTask",\n  SendMessage = "SendMessage",\n  SetActivity = "SetActivity",\n  StartExternalWarmTransfer = "StartExternalWarmTransfer",\n  ShowDirectory = "ShowDirectory",\n  TransferTask = "TransferTask",\n  WrapupTask = "WrapupTask",\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);