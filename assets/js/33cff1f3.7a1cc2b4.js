"use strict";(self.webpackChunkflex_project_template_docs=self.webpackChunkflex_project_template_docs||[]).push([[4512],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var o=n(96540);const a={},s=o.createContext(a);function r(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(s.Provider,{value:t},e.children)}},49347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"developers/building/flex-hooks/reducers","title":"reducers","description":"Use this example Redux Toolkit slice as a starting point for keeping Redux state within your feature.","source":"@site/docs/developers/building/flex-hooks/reducers.md","sourceDirName":"developers/building/flex-hooks","slug":"/developers/building/flex-hooks/reducers","permalink":"/developers/building/flex-hooks/reducers","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"developer","previous":{"title":"paste-elements","permalink":"/developers/building/flex-hooks/paste-elements"},"next":{"title":"strings","permalink":"/developers/building/flex-hooks/strings"}}');var a=n(74848),s=n(28453);const r={},l=void 0,i={},c=[];function u(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Use this example Redux Toolkit slice as a starting point for keeping Redux state within your feature."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nexport interface ExampleState {\n  myValue: boolean;\n  myOtherValue: boolean;\n}\n\nconst initialState = {\n  myValue: false,\n  myOtherValue: false,\n} as ExampleState;\n\nconst exampleSlice = createSlice({\n  name: 'exampleStateName',\n  initialState,\n  reducers: {\n    updateMyValue(state, action: PayloadAction<boolean>) {\n      state.myValue = action.payload;\n    },\n    updateMyOtherValue(state, action: PayloadAction<boolean>) {\n      state.myOtherValue = action.payload;\n    },\n  },\n});\n\nexport const { updateMyValue, updateMyOtherValue } = exampleSlice.actions;\nexport const reducerHook = () => ({ exampleStateName: exampleSlice.reducer });\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);