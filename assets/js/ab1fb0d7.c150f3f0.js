"use strict";(self.webpackChunkflex_project_template_docs=self.webpackChunkflex_project_template_docs||[]).push([[9606],{28453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>c});var n=o(96540);const r={},s=n.createContext(r);function a(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:t},e.children)}},72154:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"developers/building/flex-hooks/chat-orchestrator","title":"chat-orchestrator","description":"Use a chat orchestrator hook to modify chat orchestration via ChatOrchestrator.setOrchestrations.","source":"@site/docs/developers/building/flex-hooks/chat-orchestrator.md","sourceDirName":"developers/building/flex-hooks","slug":"/developers/building/flex-hooks/chat-orchestrator","permalink":"/developers/building/flex-hooks/chat-orchestrator","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"developer","previous":{"title":"channels","permalink":"/developers/building/flex-hooks/channels"},"next":{"title":"components","permalink":"/developers/building/flex-hooks/components"}}');var r=o(74848),s=o(28453);const a={},c=void 0,l={},i=[];function h(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Use a chat orchestrator hook to modify chat orchestration via ",(0,r.jsx)(t.code,{children:"ChatOrchestrator.setOrchestrations"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import * as Flex from '@twilio/flex-ui';\n\nimport { FlexOrchestrationEvent } from '../../../../types/feature-loader';\n\nexport const chatOrchestratorHook = (flex: typeof Flex, manager: Flex.Manager) => ({\n  event: FlexOrchestrationEvent.completed,\n  handler: handleChatComplete,\n});\n\nconst handleChatComplete = (task: Flex.ITask): any => {\n  return [Flex.ChatOrchestratorEvent.DeactivateConversation, Flex.ChatOrchestratorEvent.LeaveConversation];\n};\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Supported values for ",(0,r.jsx)(t.code,{children:"event"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'enum FlexOrchestrationEvent {\n  accepted = "accepted",\n  wrapup = "wrapup",\n  completed = "completed",\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);