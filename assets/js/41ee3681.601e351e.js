"use strict";(self.webpackChunkflex_project_template_docs=self.webpackChunkflex_project_template_docs||[]).push([[6962],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var i=r(96540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},72565:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"developers/building/feature-management/channels/voice/troubleshooting/error-codes","title":"Voice Channel Error Codes","description":"Comprehensive reference for diagnosing and fixing specific error codes in Connie\'s voice system.","source":"@site/docs/developers/building/feature-management/channels/voice/troubleshooting/error-codes.md","sourceDirName":"developers/building/feature-management/channels/voice/troubleshooting","slug":"/developers/building/feature-management/channels/voice/troubleshooting/error-codes","permalink":"/developers/building/feature-management/channels/voice/troubleshooting/error-codes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Error Codes","sidebar_position":2,"title":"Voice Channel Error Codes"},"sidebar":"developer","previous":{"title":"Common Issues","permalink":"/developers/building/feature-management/channels/voice/troubleshooting/"},"next":{"title":"Voice Direct Architecture","permalink":"/developers/building/feature-management/channels/voice/voice-direct-architecture"}}');var t=r(74848),s=r(28453);const o={sidebar_label:"Error Codes",sidebar_position:2,title:"Voice Channel Error Codes"},l="Voice Channel Error Codes",a={},c=[{value:"Twilio Platform Errors",id:"twilio-platform-errors",level:2},{value:"Call Connection Errors",id:"call-connection-errors",level:3},{value:"Error 11200: HTTP Retrieval Failure",id:"error-11200-http-retrieval-failure",level:4},{value:"Error 13224: Call Rejected",id:"error-13224-call-rejected",level:4},{value:"Error 20003: Authentication Failed",id:"error-20003-authentication-failed",level:4},{value:"Error 21211: Invalid Phone Number",id:"error-21211-invalid-phone-number",level:4},{value:"Studio Flow Errors",id:"studio-flow-errors",level:3},{value:"Error 30008: Unknown Application SID",id:"error-30008-unknown-application-sid",level:4},{value:"Flow Execution Failed",id:"flow-execution-failed",level:4},{value:"TaskRouter Errors",id:"taskrouter-errors",level:3},{value:"Error 20001: No Available Workers",id:"error-20001-no-available-workers",level:4},{value:"Task Creation Failed",id:"task-creation-failed",level:4},{value:"Add-On Specific Errors",id:"add-on-specific-errors",level:2},{value:"Email Notification Errors",id:"email-notification-errors",level:3},{value:"SMTP Authentication Failed",id:"smtp-authentication-failed",level:4},{value:"Email Delivery Failed",id:"email-delivery-failed",level:4},{value:"Transcription Errors",id:"transcription-errors",level:3},{value:"Transcription Not Available",id:"transcription-not-available",level:4},{value:"Poor Transcription Quality",id:"poor-transcription-quality",level:4},{value:"CRM Integration Errors",id:"crm-integration-errors",level:3},{value:"API Rate Limit Exceeded",id:"api-rate-limit-exceeded",level:4},{value:"CRM Data Not Found",id:"crm-data-not-found",level:4},{value:"Debugging Strategies",id:"debugging-strategies",level:2},{value:"Logging Best Practices",id:"logging-best-practices",level:3},{value:"Error Monitoring Setup",id:"error-monitoring-setup",level:3},{value:"Health Check Implementation",id:"health-check-implementation",level:3},{value:"Prevention and Monitoring",id:"prevention-and-monitoring",level:2},{value:"Proactive Monitoring",id:"proactive-monitoring",level:3},{value:"Regular Health Checks",id:"regular-health-checks",level:3},{value:"Capacity Planning",id:"capacity-planning",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"voice-channel-error-codes",children:"Voice Channel Error Codes"})}),"\n",(0,t.jsx)(n.p,{children:"Comprehensive reference for diagnosing and fixing specific error codes in Connie's voice system."}),"\n",(0,t.jsx)(n.h2,{id:"twilio-platform-errors",children:"Twilio Platform Errors"}),"\n",(0,t.jsx)(n.h3,{id:"call-connection-errors",children:"Call Connection Errors"}),"\n",(0,t.jsx)(n.h4,{id:"error-11200-http-retrieval-failure",children:"Error 11200: HTTP Retrieval Failure"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Twilio couldn't reach your webhook URL"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Common Causes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Webhook URL is incorrect or inaccessible"}),"\n",(0,t.jsx)(n.li,{children:"SSL certificate issues"}),"\n",(0,t.jsx)(n.li,{children:"Firewall blocking Connie's requests"}),"\n",(0,t.jsx)(n.li,{children:"Server overload or downtime"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Test webhook accessibility\ncurl -X POST "https://your-webhook-url.com/studio-flow" \\\n  -H "X-Twilio-Signature: test" \\\n  -d "From=+15551234567&To=+15559876543"\n\n# Check SSL certificate\nopenssl s_client -connect your-domain.com:443 -servername your-domain.com\n\n# Verify DNS resolution\nnslookup your-domain.com\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Quick Fix"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Go to Twilio Console > Phone Numbers"}),"\n",(0,t.jsx)(n.li,{children:"Update webhook URL with correct endpoint"}),"\n",(0,t.jsx)(n.li,{children:"Ensure URL uses HTTPS"}),"\n",(0,t.jsx)(n.li,{children:"Test the endpoint manually"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"error-13224-call-rejected",children:"Error 13224: Call Rejected"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": The destination rejected the call"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Common Causes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Called number is invalid or disconnected"}),"\n",(0,t.jsx)(n.li,{children:"Carrier blocking the call"}),"\n",(0,t.jsx)(n.li,{children:"Number formatting issues"}),"\n",(0,t.jsx)(n.li,{children:"Do Not Call registry restrictions"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Validate phone number format\nconst validatePhoneNumber = (number) => {\n  const e164Regex = /^\\+[1-9]\\d{1,14}$/;\n  return e164Regex.test(number);\n};\n\n// Handle invalid numbers gracefully\nif (!validatePhoneNumber(destinationNumber)) {\n  console.error('Invalid phone number format:', destinationNumber);\n  // Route to error handling\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"error-20003-authentication-failed",children:"Error 20003: Authentication Failed"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Invalid Account SID or Auth Token"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Verify Account SID and Auth Token in Twilio Console"}),"\n",(0,t.jsx)(n.li,{children:"Check environment variables are correctly set"}),"\n",(0,t.jsx)(n.li,{children:"Ensure no extra spaces or characters in credentials"}),"\n",(0,t.jsx)(n.li,{children:"Rotate Auth Token if compromised"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Verify credentials\nconst accountSid = context.ACCOUNT_SID;\nconst authToken = context.AUTH_TOKEN;\n\nconsole.log('Account SID:', accountSid?.substring(0, 10) + '...');\nconsole.log('Auth Token exists:', !!authToken);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"error-21211-invalid-phone-number",children:"Error 21211: Invalid Phone Number"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Phone number is malformed or invalid"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Proper phone number formatting\nconst formatPhoneNumber = (number) => {\n  // Remove all non-digits\n  const cleaned = number.replace(/\\D/g, '');\n  \n  // Add country code if missing (US example)\n  if (cleaned.length === 10) {\n    return `+1${cleaned}`;\n  }\n  \n  // Add + if missing\n  if (cleaned.length === 11 && !number.startsWith('+')) {\n    return `+${cleaned}`;\n  }\n  \n  return number;\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"studio-flow-errors",children:"Studio Flow Errors"}),"\n",(0,t.jsx)(n.h4,{id:"error-30008-unknown-application-sid",children:"Error 30008: Unknown Application SID"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Studio Flow SID not found or inactive"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check Studio Flow exists and is published"}),"\n",(0,t.jsx)(n.li,{children:"Verify SID in phone number configuration"}),"\n",(0,t.jsx)(n.li,{children:"Ensure Flow hasn't been deleted"}),"\n",(0,t.jsx)(n.li,{children:"Check for typos in configuration"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check Studio Flow status via CLI\ntwilio api:studio:v2:flows:list\ntwilio api:studio:v2:flows:fetch --sid FWXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"})}),"\n",(0,t.jsx)(n.h4,{id:"flow-execution-failed",children:"Flow Execution Failed"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Studio Flow encountered an unhandled error"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Common Widget Issues"}),":"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Function Widget Errors"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Always handle errors in Function widgets\nexports.handler = async (context, event, callback) => {\n  try {\n    // Your function logic here\n    const result = await performOperation();\n    callback(null, result);\n  } catch (error) {\n    console.error('Function error:', error);\n    // Return error state for Flow to handle\n    callback(null, { error: true, message: error.message });\n  }\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"HTTP Request Widget Timeouts"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Set appropriate timeout values (5-10 seconds)"}),"\n",(0,t.jsx)(n.li,{children:"Implement error handling for failed requests"}),"\n",(0,t.jsx)(n.li,{children:"Add retry logic for transient failures"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Split Widget Issues"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ensure all possible paths have valid transitions"}),"\n",(0,t.jsx)(n.li,{children:"Check for typos in condition variables"}),"\n",(0,t.jsx)(n.li,{children:"Verify data types match expected conditions"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"taskrouter-errors",children:"TaskRouter Errors"}),"\n",(0,t.jsx)(n.h4,{id:"error-20001-no-available-workers",children:"Error 20001: No Available Workers"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": No agents available to handle the task"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Diagnostic Steps"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check agent availability in ConnieRTC interface"}),"\n",(0,t.jsx)(n.li,{children:"Verify agent skills match task requirements"}),"\n",(0,t.jsx)(n.li,{children:"Review agent capacity settings"}),"\n",(0,t.jsx)(n.li,{children:"Check activity states (Available vs Away)"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Implement overflow routing\nconst createTask = async (attributes) => {\n  try {\n    const task = await client.taskrouter.workspaces(workspaceSid)\n      .tasks.create({\n        attributes: JSON.stringify(attributes),\n        workflowSid: primaryWorkflowSid,\n        timeout: 300 // 5 minutes\n      });\n    \n    return task;\n  } catch (error) {\n    if (error.code === 20001) {\n      // Route to overflow queue or voicemail\n      return await createOverflowTask(attributes);\n    }\n    throw error;\n  }\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"task-creation-failed",children:"Task Creation Failed"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": TaskRouter couldn't create the task"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Common Causes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Invalid task attributes JSON"}),"\n",(0,t.jsx)(n.li,{children:"Missing required workflow configuration"}),"\n",(0,t.jsx)(n.li,{children:"Workspace limits exceeded"}),"\n",(0,t.jsx)(n.li,{children:"Invalid queue or workflow SID"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Validate task attributes before creation\nconst validateTaskAttributes = (attributes) => {\n  try {\n    JSON.parse(JSON.stringify(attributes));\n    return true;\n  } catch (error) {\n    console.error('Invalid task attributes:', error);\n    return false;\n  }\n};\n\n// Sanitize attributes\nconst sanitizeAttributes = (attributes) => {\n  const sanitized = {};\n  for (const [key, value] of Object.entries(attributes)) {\n    // Ensure all values are JSON-serializable\n    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n      sanitized[key] = value;\n    } else if (value && typeof value === 'object') {\n      sanitized[key] = JSON.stringify(value);\n    }\n  }\n  return sanitized;\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"add-on-specific-errors",children:"Add-On Specific Errors"}),"\n",(0,t.jsx)(n.h3,{id:"email-notification-errors",children:"Email Notification Errors"}),"\n",(0,t.jsx)(n.h4,{id:"smtp-authentication-failed",children:"SMTP Authentication Failed"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Error"}),": Email service rejected credentials"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Test email configuration\nconst testEmailConfig = async () => {\n  try {\n    const testResult = await emailService.verify();\n    console.log('Email service verified:', testResult);\n  } catch (error) {\n    console.error('Email config error:', error);\n    // Check credentials, API keys, domain settings\n  }\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"email-delivery-failed",children:"Email Delivery Failed"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Error"}),": Email sent but not delivered"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Diagnostic Checklist"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Check spam folder"}),"\n",(0,t.jsx)(n.li,{children:"Verify recipient email address"}),"\n",(0,t.jsx)(n.li,{children:"Review sender reputation"}),"\n",(0,t.jsx)(n.li,{children:"Check SPF/DKIM records"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Implement email delivery tracking\nconst sendEmailWithTracking = async (emailData) => {\n  try {\n    const result = await emailService.send(emailData);\n    \n    // Log successful send\n    await logEmailDelivery({\n      recipient: emailData.to,\n      subject: emailData.subject,\n      status: 'sent',\n      message_id: result.messageId,\n      timestamp: new Date()\n    });\n    \n    return result;\n  } catch (error) {\n    // Log failed send\n    await logEmailDelivery({\n      recipient: emailData.to,\n      subject: emailData.subject,\n      status: 'failed',\n      error: error.message,\n      timestamp: new Date()\n    });\n    \n    throw error;\n  }\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"transcription-errors",children:"Transcription Errors"}),"\n",(0,t.jsx)(n.h4,{id:"transcription-not-available",children:"Transcription Not Available"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Error"}),": Recording exists but no transcription"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check if transcription was enabled in recording settings"}),"\n",(0,t.jsx)(n.li,{children:"Verify transcription webhook URL"}),"\n",(0,t.jsx)(n.li,{children:"Review audio quality requirements"}),"\n",(0,t.jsx)(n.li,{children:"Check supported languages"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Enable transcription in Studio Flow\nconst recordingConfig = {\n  transcribe: true,\n  transcription_callback: `https://${context.DOMAIN_NAME}/transcription-webhook`,\n  max_length: 300,\n  play_beep: true\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"poor-transcription-quality",children:"Poor Transcription Quality"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Error"}),": Transcription text is garbled or incomplete"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Check audio quality (clear speech, minimal background noise)"}),"\n",(0,t.jsx)(n.li,{children:"Verify correct language setting"}),"\n",(0,t.jsx)(n.li,{children:"Consider custom vocabulary for domain-specific terms"}),"\n",(0,t.jsx)(n.li,{children:"Review confidence scores"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Post-process transcription for quality\nconst processTranscription = (transcriptionData) => {\n  const { text, confidence } = transcriptionData;\n  \n  if (confidence < 0.6) {\n    console.warn('Low confidence transcription:', confidence);\n    // Flag for human review\n    return {\n      ...transcriptionData,\n      needs_review: true,\n      quality: 'low'\n    };\n  }\n  \n  return {\n    ...transcriptionData,\n    needs_review: false,\n    quality: confidence > 0.8 ? 'high' : 'medium'\n  };\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"crm-integration-errors",children:"CRM Integration Errors"}),"\n",(0,t.jsx)(n.h4,{id:"api-rate-limit-exceeded",children:"API Rate Limit Exceeded"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Error"}),": Too many API requests to CRM system"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Implement rate limiting with exponential backoff\nclass RateLimitedAPI {\n  constructor(maxRequests = 100, timeWindow = 3600000) { // 100 requests per hour\n    this.requests = [];\n    this.maxRequests = maxRequests;\n    this.timeWindow = timeWindow;\n  }\n  \n  async makeRequest(apiCall) {\n    // Clean old requests\n    const now = Date.now();\n    this.requests = this.requests.filter(time => now - time < this.timeWindow);\n    \n    if (this.requests.length >= this.maxRequests) {\n      const oldestRequest = Math.min(...this.requests);\n      const waitTime = this.timeWindow - (now - oldestRequest);\n      await this.sleep(waitTime);\n    }\n    \n    this.requests.push(now);\n    return await apiCall();\n  }\n  \n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"crm-data-not-found",children:"CRM Data Not Found"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Error"}),": No matching record for phone number"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Implement fuzzy matching for phone numbers\nconst normalizePhoneNumber = (phone) => {\n  return phone.replace(/\\D/g, ''); // Remove all non-digits\n};\n\nconst findCRMContact = async (phoneNumber) => {\n  const normalized = normalizePhoneNumber(phoneNumber);\n  \n  // Try exact match first\n  let contact = await crm.findByPhone(phoneNumber);\n  if (contact) return contact;\n  \n  // Try normalized match\n  contact = await crm.findByPhone(`+1${normalized}`);\n  if (contact) return contact;\n  \n  // Try without country code\n  if (normalized.length === 11 && normalized.startsWith('1')) {\n    contact = await crm.findByPhone(normalized.substring(1));\n    if (contact) return contact;\n  }\n  \n  return null;\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"debugging-strategies",children:"Debugging Strategies"}),"\n",(0,t.jsx)(n.h3,{id:"logging-best-practices",children:"Logging Best Practices"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Structured logging for better debugging\nconst logger = {\n  info: (message, data = {}) => {\n    console.log(JSON.stringify({\n      level: 'INFO',\n      timestamp: new Date().toISOString(),\n      message,\n      ...data\n    }));\n  },\n  \n  error: (message, error, data = {}) => {\n    console.error(JSON.stringify({\n      level: 'ERROR',\n      timestamp: new Date().toISOString(),\n      message,\n      error: error.message,\n      stack: error.stack,\n      ...data\n    }));\n  },\n  \n  debug: (message, data = {}) => {\n    console.log(JSON.stringify({\n      level: 'DEBUG',\n      timestamp: new Date().toISOString(),\n      message,\n      ...data\n    }));\n  }\n};\n\n// Usage in functions\nexports.handler = async (context, event, callback) => {\n  logger.info('Function started', { \n    from: event.From, \n    to: event.To,\n    callSid: event.CallSid \n  });\n  \n  try {\n    const result = await processCall(event);\n    logger.info('Function completed successfully', { result });\n    callback(null, result);\n  } catch (error) {\n    logger.error('Function failed', error, { \n      event: event,\n      context: Object.keys(context) \n    });\n    callback(error);\n  }\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"error-monitoring-setup",children:"Error Monitoring Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Implement error tracking\nconst trackError = async (error, context) => {\n  const errorData = {\n    message: error.message,\n    stack: error.stack,\n    timestamp: new Date().toISOString(),\n    context: context,\n    environment: process.env.NODE_ENV || 'development'\n  };\n  \n  // Send to error tracking service\n  try {\n    await errorTrackingService.report(errorData);\n  } catch (reportError) {\n    console.error('Failed to report error:', reportError);\n  }\n  \n  // Store locally for analysis\n  await storeErrorLog(errorData);\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"health-check-implementation",children:"Health Check Implementation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Comprehensive health check\nexports.healthCheck = async (context, event, callback) => {\n  const healthStatus = {\n    timestamp: new Date().toISOString(),\n    services: {}\n  };\n  \n  // Check database connection\n  try {\n    await testDatabaseConnection();\n    healthStatus.services.database = { status: 'healthy' };\n  } catch (error) {\n    healthStatus.services.database = { \n      status: 'unhealthy', \n      error: error.message \n    };\n  }\n  \n  // Check CRM API\n  try {\n    await testCRMConnection();\n    healthStatus.services.crm = { status: 'healthy' };\n  } catch (error) {\n    healthStatus.services.crm = { \n      status: 'unhealthy', \n      error: error.message \n    };\n  }\n  \n  // Check email service\n  try {\n    await testEmailService();\n    healthStatus.services.email = { status: 'healthy' };\n  } catch (error) {\n    healthStatus.services.email = { \n      status: 'unhealthy', \n      error: error.message \n    };\n  }\n  \n  // Overall health\n  const allHealthy = Object.values(healthStatus.services)\n    .every(service => service.status === 'healthy');\n  \n  healthStatus.overall = allHealthy ? 'healthy' : 'degraded';\n  \n  callback(null, healthStatus);\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"prevention-and-monitoring",children:"Prevention and Monitoring"}),"\n",(0,t.jsx)(n.h3,{id:"proactive-monitoring",children:"Proactive Monitoring"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Set up alerts for error rate thresholds"}),"\n",(0,t.jsx)(n.li,{children:"Monitor response times for external services"}),"\n",(0,t.jsx)(n.li,{children:"Track call completion rates"}),"\n",(0,t.jsx)(n.li,{children:"Monitor queue wait times"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"regular-health-checks",children:"Regular Health Checks"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Automated testing of critical workflows"}),"\n",(0,t.jsx)(n.li,{children:"Validation of webhook endpoints"}),"\n",(0,t.jsx)(n.li,{children:"Database connection monitoring"}),"\n",(0,t.jsx)(n.li,{children:"API credential validation"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"capacity-planning",children:"Capacity Planning"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Monitor concurrent call limits"}),"\n",(0,t.jsx)(n.li,{children:"Track agent availability patterns"}),"\n",(0,t.jsx)(n.li,{children:"Review queue capacity and overflow handling"}),"\n",(0,t.jsx)(n.li,{children:"Plan for peak usage scenarios"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);