"use strict";(self.webpackChunkflex_project_template_docs=self.webpackChunkflex_project_template_docs||[]).push([[3882],{8565:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"developers/building/flex-hooks/channels","title":"channels","description":"Use a channels hook to register new task channel definitions.","source":"@site/docs/developers/building/flex-hooks/channels.md","sourceDirName":"developers/building/flex-hooks","slug":"/developers/building/flex-hooks/channels","permalink":"/developers/building/flex-hooks/channels","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"developer","previous":{"title":"actions","permalink":"/developers/building/flex-hooks/actions"},"next":{"title":"chat-orchestrator","permalink":"/developers/building/flex-hooks/chat-orchestrator"}}');var s=t(74848),l=t(28453);const o={},i=void 0,c={},r=[];function k(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Use a channels hook to register new ",(0,s.jsx)(n.a,{href:"https://www.twilio.com/docs/flex/developer/ui/task-channel-definitions",children:"task channel definitions"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import * as Flex from '@twilio/flex-ui';\nimport PhoneCallbackIcon from '@material-ui/icons/PhoneCallback';\n\nimport { TaskAttributes } from '../../../../types/task-router/Task';\n\nexport const channelHook = function createCallbackChannel(flex: typeof Flex, manager: Flex.Manager) {\n  const channelDefinition = flex.DefaultTaskChannels.createDefaultTaskChannel(\n    'callback',\n    (task) => {\n      const { taskType } = task.attributes as TaskAttributes;\n      return task.taskChannelUniqueName === 'voice' && taskType === 'callback';\n    },\n    'CallbackIcon',\n    'CallbackIcon',\n    'palegreen',\n  );\n\n  const { templates } = channelDefinition;\n  const CallbackChannel: Flex.TaskChannelDefinition = {\n    ...channelDefinition,\n    templates: {\n      ...templates,\n      TaskListItem: {\n        ...templates?.TaskListItem,\n        firstLine: (task: Flex.ITask) => `${task.queueName}: ${task.attributes.name}`,\n      },\n      TaskCanvasHeader: {\n        ...templates?.TaskCanvasHeader,\n        title: (task: Flex.ITask) => `${task.queueName}: ${task.attributes.name}`,\n      },\n      IncomingTaskCanvas: {\n        ...templates?.IncomingTaskCanvas,\n        firstLine: (task: Flex.ITask) => task.queueName,\n      },\n    },\n    icons: {\n      active: <PhoneCallbackIcon key=\"active-callback-icon\" />,\n      list: <PhoneCallbackIcon key=\"list-callback-icon\" />,\n      main: <PhoneCallbackIcon key=\"main-callback-icon\" />,\n    },\n  };\n\n  return CallbackChannel;\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"Alternatively, you can use a channels hook to modify an existing task channel definition."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import * as Flex from \'@twilio/flex-ui\';\n\nimport CustomerAvatarObject from \'../../custom-components/CustomerAvatarObject\';\n\nexport const channelHook = function overrideCallChannelToUseCustomerAttribute(\n  flex: typeof Flex,\n  _manager: Flex.Manager,\n) {\n  const channelDefinition = flex.DefaultTaskChannels.Call;\n  const { templates, icons } = channelDefinition;\n\n  channelDefinition.templates = {\n    ...templates,\n    TaskListItem: {\n      ...flex.DefaultTaskChannels.Call.templates?.TaskListItem,\n      firstLine: (task: Flex.ITask) => `(${task.attributes.customer}) ${task.defaultFrom}`,\n    },\n    TaskCanvasHeader: {\n      ...flex.DefaultTaskChannels.Call.templates?.TaskCanvasHeader,\n      title: (task: Flex.ITask) => `(${task.attributes.customer}) ${task.defaultFrom}`,\n    },\n  };\n\n  channelDefinition.icons = {\n    ...icons,\n    list: <CustomerAvatarObject key="task-list-customer-avatar" />,\n    main: <CustomerAvatarObject key="main-customer-avatar" />,\n    active: <CustomerAvatarObject key="active-customer-avatar" />,\n  };\n\n  // Nothing to return from hook, since we are overriding the default Call channel versus adding a new channel\n};\n'})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(k,{...e})}):k(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(96540);const s={},l=a.createContext(s);function o(e){const n=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);