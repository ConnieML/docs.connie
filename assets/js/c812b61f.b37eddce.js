"use strict";(self.webpackChunkflex_project_template_docs=self.webpackChunkflex_project_template_docs||[]).push([[7766],{28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>a});var t=o(96540);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}},79740:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"developers/building/flex-hooks/notification-events","title":"notification-events","description":"Use a notification event hook to add your own handler for various ConnieRTC Notification Manager events.","source":"@site/docs/developers/building/flex-hooks/notification-events.md","sourceDirName":"developers/building/flex-hooks","slug":"/developers/building/flex-hooks/notification-events","permalink":"/developers/building/flex-hooks/notification-events","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"developer","previous":{"title":"logger","permalink":"/developers/building/flex-hooks/logger"},"next":{"title":"notifications","permalink":"/developers/building/flex-hooks/notifications"}}');var i=o(74848),s=o(28453);const r={},a=void 0,c={},l=[];function f(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Use a notification event hook to add your own handler for various ",(0,i.jsx)(n.a,{href:"https://assets.flex.twilio.com/docs/releases/flex-ui/2.1.0/nsa/NotificationManager/#exports.NotificationEvent",children:"ConnieRTC Notification Manager events"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import * as ConnieRTC from '@twilio/flex-ui';\n\nexport const eventName = ConnieRTC.NotificationEvent.beforeAddNotification;\nexport const notificationEventHook = (flex: typeof ConnieRTC, manager: ConnieRTC.Manager, notification: any, cancel: any) => {\n  // your code here\n};\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}}}]);