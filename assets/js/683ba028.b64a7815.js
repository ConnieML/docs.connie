"use strict";(self.webpackChunkflex_project_template_docs=self.webpackChunkflex_project_template_docs||[]).push([[1127],{20242:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/flex-user-experience-enhanced-crm-container-7ffe778a8705b3fc064b8c669b08c9fb.gif"},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(96540);const a={},s=i.createContext(a);function r(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:t},e.children)}},40499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"feature-library/enhanced-crm-container","title":"enhanced-crm-container","description":"This feature replaces the OOTB CRMContainer with an extensible tabbed interface with which other features can register tabs to display. This feature also optionally registers a tab of its own for displaying an IFrame.","source":"@site/docs/feature-library/enhanced-crm-container.md","sourceDirName":"feature-library","slug":"/feature-library/enhanced-crm-container","permalink":"/feature-library/enhanced-crm-container","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"sidebar_label":"enhanced-crm-container","title":"enhanced-crm-container"},"sidebar":"tutorialSidebar","previous":{"title":"emoji-picker","permalink":"/feature-library/emoji-picker"},"next":{"title":"force-conference-region","permalink":"/feature-library/force-conference-region"}}');var a=n(74848),s=n(28453);const r={sidebar_label:"enhanced-crm-container",title:"enhanced-crm-container"},o=void 0,l={},c=[{value:"flex-user-experience",id:"flex-user-experience",level:2},{value:"setup and dependencies",id:"setup-and-dependencies",level:2},{value:"how does it work?",id:"how-does-it-work",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["This feature replaces the OOTB ",(0,a.jsx)(t.a,{href:"https://assets.flex.twilio.com/docs/releases/flex-ui/latest/programmable-components/components/CRMContainer",children:"CRMContainer"})," with an extensible tabbed interface with which other features can register tabs to display. This feature also optionally registers a tab of its own for displaying an IFrame."]}),"\n",(0,a.jsx)(t.p,{children:"This feature provides the following functionality:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Extensible tabbed interface","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Other features can register tabs via the ",(0,a.jsx)(t.code,{children:"beforeLoadCRMContainerTabs"})," action"]}),"\n",(0,a.jsxs)(t.li,{children:["Other features can select a specific tab via the ",(0,a.jsx)(t.code,{children:"SelectCRMContainerTab"})," action"]}),"\n",(0,a.jsx)(t.li,{children:"Tabs can receive task context, including if there is no task"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["Configurable IFrame allowing you to specify a URL to display, including task and worker attribute interpolation","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Can optionally display an alternate URL when there are no tasks"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["A notable shortcoming with the OOTB CRM container is that it re-renders as you toggle between tasks. This CRMContainer will only render once and the component is simply hidden as you toggle between tasks. Furthermore, using a task attribute of parentTask we can ensure related tasks only render the one component. A typical example of this is when creating a callback which starts as one task and creates a separate outbound call task to dial the customer. When toggling between these tasks, the component will render the same instance.","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"This effectively allows agents to safely input text into the IFramed webpage without that text getting lost when switching between tasks."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"flex-user-experience",children:"flex-user-experience"}),"\n",(0,a.jsx)(t.p,{children:"Below is a demonstration showing the CRM container maintained for outbound callbacks, as well as the extensible tabbed interface (using canned responses as an example)."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Enhanced CRM Container demo",src:n(20242).A+"",width:"1547",height:"688"})}),"\n",(0,a.jsx)(t.h2,{id:"setup-and-dependencies",children:"setup and dependencies"}),"\n",(0,a.jsxs)(t.p,{children:["Within your ",(0,a.jsx)(t.code,{children:"ui_attributes"})," file, you must set two settings for this feature:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"enabled"})," - set this to true to enable the feature"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"enable_url_tab"})," - set this to true to enable the iframe tab within the container"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"url_tab_title"})," - set the tab title that will be displayed for the configured URL"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"url"})," - set this to the URL to embed within the CRM container"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"There are additional settings you may also wish to configure:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"should_display_url_when_no_tasks"})," - set this to true if a URL should be loaded when no task is selected"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"display_url_when_no_tasks"})," - set this to the URL to embed when no task is selected and the above setting is ",(0,a.jsx)(t.code,{children:"true"})]}),"\n"]}),"\n",(0,a.jsxs)(t.admonition,{title:"URL Special Powers",type:"tip",children:[(0,a.jsxs)(t.p,{children:["Within the ",(0,a.jsx)(t.code,{children:"url"})," or the ",(0,a.jsx)(t.code,{children:"display_url_when_no_tasks"}),", you may include task and/or worker attributes via template variable substitution. To do so, use the format ",(0,a.jsx)(t.code,{children:"{{task.attribute_name_goes_here}}"})," or ",(0,a.jsx)(t.code,{children:"{{worker.attribute_name_goes_here}}"})," within the URL. If the attribute exists, the template variable is replaced with the contents of the attribute. Otherwise, the variable is replaced with an empty string."]}),(0,a.jsxs)(t.p,{children:["You may also reference the serverless base URL using the format ",(0,a.jsx)(t.code,{children:"{{serverless.url}}"}),"."]})]}),"\n",(0,a.jsx)(t.p,{children:"Once your updated flex-config is deployed, the feature is enabled and ready to use."}),"\n",(0,a.jsx)(t.h2,{id:"how-does-it-work",children:"how does it work?"}),"\n",(0,a.jsx)(t.p,{children:"The component keeps a array of each task and renders a component for each one. Based on the currently selected task, the component re-renders and modifies the CSS to either hide or show based on whether it is the currently selected task. Once the task is removed the component is removed."}),"\n",(0,a.jsxs)(t.p,{children:["To register a tab in the enhanced CRM component, other features can register an ",(0,a.jsx)(t.code,{children:"actions"})," flex-hook to inject their component and a tab title. Here is an example:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",children:"import * as Flex from '@twilio/flex-ui';\n\nimport MyCRMTab from '../../custom-components/MyCRMTab';\nimport { FlexActionEvent } from '../../../../types/feature-loader';\n\nexport const actionEvent = FlexActionEvent.before;\nexport const actionName = 'LoadCRMContainerTabs';\nexport const actionHook = function addToEnhancedCRM(flex: typeof Flex, manager: Flex.Manager) {\n  flex.Actions.addListener(`${actionEvent}${actionName}`, async (payload) => {\n    // Remove this condition if you'd like to render even without a task selected\n    // You may also conditionally return based on task attributes, etc.\n    if (!payload.task) {\n      return;\n    }\n\n    // Append with our component definition\n    payload.components = [\n      ...payload.components,\n      {\n        title: 'My Custom CRM Tab',\n        order: 0, // optionally define preferred tab order, defaults to 999 if not present\n        component: <MyCRMTab task={payload.task} key=\"my-crm-tab\" />,\n      },\n    ];\n  });\n};\n"})}),"\n",(0,a.jsxs)(t.p,{children:["When the enhanced CRM component mounts, it adds a listener for ",(0,a.jsx)(t.code,{children:"afterLoadCRMContainerTabs"}),", then invokes the ",(0,a.jsx)(t.code,{children:"LoadCRMContainerTabs"})," action with the task in its payload. The ",(0,a.jsx)(t.code,{children:"afterLoadCRMContainerTabs"})," action receives the components array in the payload, and renders those components. It immediately unregisters the listener to prevent receiving payloads for other tasks."]}),"\n",(0,a.jsxs)(t.p,{children:["To select a CRM tab programmatically, other features may invoke the ",(0,a.jsx)(t.code,{children:"SelectCRMContainerTab"})," action, providing a ",(0,a.jsx)(t.code,{children:"title"})," property in the action payload. The tab with the specified title will be selected if present."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);