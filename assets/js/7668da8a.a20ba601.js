"use strict";(self.webpackChunkflex_project_template_docs=self.webpackChunkflex_project_template_docs||[]).push([[846],{28453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>l});var t=n(96540);const r={},s=t.createContext(r);function o(e){const i=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:i},e.children)}},38860:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"developers/building/feature-management/channels/voice/voice-direct-architecture","title":"ConnieRTC Voice Direct Service Architecture","description":"This document provides generic, client-agnostic Mermaid diagrams that illustrate the ConnieRTC Voice Direct service architecture for developer documentation and implementation reference.","source":"@site/docs/developers/building/feature-management/channels/voice/voice-direct-architecture.md","sourceDirName":"developers/building/feature-management/channels/voice","slug":"/developers/building/feature-management/channels/voice/voice-direct-architecture","permalink":"/developers/building/feature-management/channels/voice/voice-direct-architecture","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_label":"Voice Direct Architecture","sidebar_position":1,"title":"ConnieRTC Voice Direct Service Architecture"},"sidebar":"developer","previous":{"title":"Error Codes","permalink":"/developers/building/feature-management/channels/voice/troubleshooting/error-codes"},"next":{"title":"Voicemail","permalink":"/category/voicemail-1"}}');var r=n(74848),s=n(28453);const o={sidebar_label:"Voice Direct Architecture",sidebar_position:1,title:"ConnieRTC Voice Direct Service Architecture"},l="ConnieRTC Voice Direct Service Architecture",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Voice Direct + Voicemail Architecture",id:"voice-direct--voicemail-architecture",level:2},{value:"Key Components",id:"key-components",level:3},{value:"Process Flow",id:"process-flow",level:3},{value:"Voice Direct (Basic) Architecture",id:"voice-direct-basic-architecture",level:2},{value:"Key Components",id:"key-components-1",level:3},{value:"Process Flow",id:"process-flow-1",level:3},{value:"Implementation Considerations",id:"implementation-considerations",level:2},{value:"Generic Configuration Parameters",id:"generic-configuration-parameters",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Deployment Patterns",id:"deployment-patterns",level:3},{value:"Feature Comparison",id:"feature-comparison",level:2},{value:"Related Documentation",id:"related-documentation",level:2},{value:"Developer Notes",id:"developer-notes",level:2},{value:"Customization Points",id:"customization-points",level:3},{value:"Monitoring and Analytics",id:"monitoring-and-analytics",level:3},{value:"Security Considerations",id:"security-considerations",level:3}];function d(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"conniertc-voice-direct-service-architecture",children:"ConnieRTC Voice Direct Service Architecture"})}),"\n",(0,r.jsx)(i.p,{children:"This document provides generic, client-agnostic Mermaid diagrams that illustrate the ConnieRTC Voice Direct service architecture for developer documentation and implementation reference."}),"\n",(0,r.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(i.p,{children:"ConnieRTC Voice Direct services provide two primary workflows for handling incoming voice calls:"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Voice Direct + Voicemail"}),": Auto-routes callers to voicemail with task creation and email notifications"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Voice Direct (Basic)"}),": Direct routing to task queues without voicemail options"]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["Both workflows are designed to be ",(0,r.jsx)(i.strong,{children:"client-agnostic"})," and use generic terminology that applies to any ConnieRTC deployment."]}),"\n",(0,r.jsx)(i.h2,{id:"voice-direct--voicemail-architecture",children:"Voice Direct + Voicemail Architecture"}),"\n",(0,r.jsx)(i.p,{children:"This workflow provides a complete voicemail experience with automatic task creation and email notifications to administrators. It's ideal for organizations that need to capture all incoming communications."}),"\n",(0,r.jsx)(i.mermaid,{value:"flowchart TB\n    A[Incoming Call to Client Phone Number] --\x3e B[Twilio Studio Flow]\n    B --\x3e C[Play Greeting Message]\n    C --\x3e D[Record Voicemail Widget]\n    D --\x3e E[TwiML Redirect to Serverless Function]\n    E --\x3e F[Create Callback Task Function]\n    F --\x3e G[Task Created in ConnieRTC]\n    F --\x3e H[Send Voicemail Email Function]\n    G --\x3e I[Task Appears in Agent Queue]\n    H --\x3e J[Email Sent to Admin]\n    I --\x3e K[Agent Reviews Voicemail Task]\n    J --\x3e L[Admin Receives Email Notification]\n    K --\x3e M[Agent Completes Task]\n    D --\x3e N[Call Ends]\n    \n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style G fill:#e8f5e9\n    style I fill:#fce4ec\n    style K fill:#fff3e0\n    style J fill:#e0f2f1"}),"\n",(0,r.jsx)(i.h3,{id:"key-components",children:"Key Components"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Client Phone Number"}),": The customer-facing phone number that routes to the Studio Flow"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Studio Flow"}),": Twilio Studio flow that orchestrates the voice experience"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Serverless Functions"}),": Backend logic for task creation and email processing"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"ConnieRTC Task Queue"}),": Where voicemail tasks appear for agent processing"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Email Service"}),": Automated notifications sent to administrators"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"process-flow",children:"Process Flow"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Call Initiation"}),": Customer calls the client's phone number"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Studio Processing"}),": Studio flow plays greeting and initiates recording"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Voicemail Capture"}),": Recording widget captures the customer's message"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Task Creation"}),": Serverless function creates a task in ConnieRTC with voicemail details"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Email Notification"}),": Parallel process sends voicemail to admin email as attachment"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Agent Processing"}),": Agent receives task with voicemail recording and handles accordingly"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"voice-direct-basic-architecture",children:"Voice Direct (Basic) Architecture"}),"\n",(0,r.jsx)(i.p,{children:"This streamlined workflow provides direct routing to ConnieRTC task queues without voicemail capabilities. It's designed for organizations that prefer immediate task creation without hold queues."}),"\n",(0,r.jsx)(i.mermaid,{value:"flowchart TB\n    A[Incoming Call to Client Phone Number] --\x3e B[Twilio Studio Flow]\n    B --\x3e C[Call Processing Logic]\n    C --\x3e D[Send to ConnieRTC Widget]\n    D --\x3e E[Task Created in TaskRouter]\n    E --\x3e F[Task Routed to Appropriate Queue]\n    F --\x3e G[Agent Receives Direct Call Task]\n    G --\x3e H[Agent Handles Live Call]\n    H --\x3e I[Agent Completes Task]\n    \n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style E fill:#e8f5e9\n    style F fill:#fce4ec\n    style G fill:#fff3e0"}),"\n",(0,r.jsx)(i.h3,{id:"key-components-1",children:"Key Components"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Client Phone Number"}),": The customer-facing phone number"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Studio Flow"}),": Minimal Studio flow for call routing"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Send to ConnieRTC Widget"}),": Studio widget that creates tasks and routes to agents"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"TaskRouter"}),": Connie's task routing engine"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Task Queue"}),": Specific queue based on routing logic"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"process-flow-1",children:"Process Flow"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Call Initiation"}),": Customer calls the client's phone number"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Studio Processing"}),": Studio flow processes the call with minimal logic"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Task Creation"}),": Send to ConnieRTC widget creates a task immediately"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Task Routing"}),": TaskRouter routes the task to the appropriate queue"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Agent Assignment"}),": Available agent receives the task and connects to the live call"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Call Handling"}),": Agent handles the customer call directly"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"implementation-considerations",children:"Implementation Considerations"}),"\n",(0,r.jsx)(i.h3,{id:"generic-configuration-parameters",children:"Generic Configuration Parameters"}),"\n",(0,r.jsx)(i.p,{children:"Both workflows use these generic configuration elements:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Client Phone Number"}),": The customer-facing number (varies by client)"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Studio Flow SID"}),": References the specific Studio flow"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Workflow SID"}),": TaskRouter workflow for routing logic"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Task Queue"}),": Target queue for task routing"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Serverless Function URLs"}),": Backend processing endpoints"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-bash",children:"# Generic environment variables (client-specific values)\nTWILIO_FLEX_WORKSPACE_SID=WSxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nTWILIO_FLEX_CALLBACK_WORKFLOW_SID=WWxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nADMIN_EMAIL=admin@client-domain.com\nMAILGUN_DOMAIN=voicemail.client-domain.com\nMAILGUN_API_KEY=key-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n"})}),"\n",(0,r.jsx)(i.h3,{id:"deployment-patterns",children:"Deployment Patterns"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Terraform Deployment"}),": Infrastructure as Code for consistent deployments"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Serverless Functions"}),": Deployed via Twilio CLI or CI/CD pipeline"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Studio Flow"}),": JSON configuration imported into Twilio Studio"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"ConnieRTC Configuration"}),": UI attributes and feature flags"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"feature-comparison",children:"Feature Comparison"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Feature"}),(0,r.jsx)(i.th,{children:"Voice Direct Basic"}),(0,r.jsx)(i.th,{children:"Voice Direct + Voicemail"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Live Call Handling"}),(0,r.jsx)(i.td,{children:"\u2705"}),(0,r.jsx)(i.td,{children:"\u274c"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Voicemail Recording"}),(0,r.jsx)(i.td,{children:"\u274c"}),(0,r.jsx)(i.td,{children:"\u2705"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Email Notifications"}),(0,r.jsx)(i.td,{children:"\u274c"}),(0,r.jsx)(i.td,{children:"\u2705"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Task Creation"}),(0,r.jsx)(i.td,{children:"\u2705"}),(0,r.jsx)(i.td,{children:"\u2705"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Agent Interface"}),(0,r.jsx)(i.td,{children:"Standard Call"}),(0,r.jsx)(i.td,{children:"Voicemail Playback"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Implementation Complexity"}),(0,r.jsx)(i.td,{children:"Low"}),(0,r.jsx)(i.td,{children:"Medium"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"Infrastructure Requirements"}),(0,r.jsx)(i.td,{children:"Minimal"}),(0,r.jsx)(i.td,{children:"Functions + Email Service"})]})]})]}),"\n",(0,r.jsx)(i.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"./direct.md",children:"Voice Direct Workflows"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"./voicemail-only.md",children:"Voicemail-Only Configuration"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"../../../feature-library/callback-and-voicemail.md",children:"Callback and Voicemail Feature"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"../add-ons/email-notifications.md",children:"Email Notifications Setup"})}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"developer-notes",children:"Developer Notes"}),"\n",(0,r.jsx)(i.h3,{id:"customization-points",children:"Customization Points"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Greeting Messages"}),": Modify Studio flow messages for client branding"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Routing Logic"}),": Adjust TaskRouter workflows for specific business rules"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Email Templates"}),": Customize email notifications with client-specific formatting"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Task Attributes"}),": Add custom attributes for client-specific data requirements"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"monitoring-and-analytics",children:"Monitoring and Analytics"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Studio Flow Metrics"}),": Monitor call volume and flow completion rates"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Task Metrics"}),": Track task creation, assignment, and completion times"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Email Delivery"}),": Monitor email notification success rates"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Agent Performance"}),": Analyze voicemail processing and response times"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Recording Access"}),": Voicemail recordings contain sensitive customer data"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Email Security"}),": Ensure secure transmission of voicemail attachments"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"API Authentication"}),": Proper credential management for all service integrations"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Data Retention"}),": Implement appropriate retention policies for recordings and tasks"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"These architecture diagrams provide a foundation for understanding ConnieRTC Voice Direct services and can be customized for specific client implementations while maintaining the core architectural patterns."})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);