"use strict";(self.webpackChunkflex_project_template_docs=self.webpackChunkflex_project_template_docs||[]).push([[1081],{19880:(e,i,a)=>{a.d(i,{A:()=>t});const t=a.p+"assets/images/sample-triggering-callback-71348b00b7e37632668efe08e0c6d8b0.png"},25076:(e,i,a)=>{a.d(i,{A:()=>t});const t=a.p+"assets/images/flex-user-experience-vm-with-trans-81da0afd0741b7cd3344ad9816a8d534.gif"},28453:(e,i,a)=>{a.d(i,{R:()=>o,x:()=>s});var t=a(96540);const n={},l=t.createContext(n);function o(e){const i=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),t.createElement(l.Provider,{value:i},e.children)}},42136:(e,i,a)=>{a.r(i),a.d(i,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"feature-library/callback-and-voicemail","title":"callback-and-voicemail","description":"This feature enables the creation of callbacks and voicemails as custom task types - by means of a Serverless Functions API. It also provides the UI to handle these special types of task in ConnieRTC - by means of ConnieRTC Plugin components. It is a generic reference implementation intended to be customized to meet the needs of any particular use case, and ultimately accelerate the development of callback and voicemail functionality - both on the the front end (ConnieRTC), and in the IVR (e.g. Studio).","source":"@site/docs/feature-library/callback-and-voicemail.md","sourceDirName":"feature-library","slug":"/feature-library/callback-and-voicemail","permalink":"/feature-library/callback-and-voicemail","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"sidebar_label":"callback-and-voicemail","title":"callback-and-voicemail"},"sidebar":"tutorialSidebar","previous":{"title":"Callback and Voicemail with Email Notifications","permalink":"/feature-library/callback-and-voicemail-with-email"},"next":{"title":"caller-id","permalink":"/feature-library/caller-id"}}');var n=a(74848),l=a(28453);const o={sidebar_label:"callback-and-voicemail",title:"callback-and-voicemail"},s=void 0,r={},c=[{value:"ConnieRTC User Experience",id:"conniertc-user-experience",level:2},{value:"How Does it Work?",id:"how-does-it-work",level:2},{value:"Setup and Dependencies",id:"setup-and-dependencies",level:2},{value:"Creating a Callback Task Using the <em>create-callback</em> Function",id:"creating-a-callback-task-using-the-create-callback-function",level:3},{value:"Specifying the Workflow to Use",id:"specifying-the-workflow-to-use",level:4},{value:"Voicemail Additional Parameters",id:"voicemail-additional-parameters",level:4},{value:"Using Transcriptions in Voicemail Tasks",id:"using-transcriptions-in-voicemail-tasks",level:4},{value:"Requesting a Callback or Leaving a Voicemail While In Queue",id:"requesting-a-callback-or-leaving-a-voicemail-while-in-queue",level:3},{value:"Noteworthy Points Regarding the <em>wait-experience</em> Logic",id:"noteworthy-points-regarding-the-wait-experience-logic",level:4}];function d(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.p,{children:"This feature enables the creation of callbacks and voicemails as custom task types - by means of a Serverless Functions API. It also provides the UI to handle these special types of task in ConnieRTC - by means of ConnieRTC Plugin components. It is a generic reference implementation intended to be customized to meet the needs of any particular use case, and ultimately accelerate the development of callback and voicemail functionality - both on the the front end (ConnieRTC), and in the IVR (e.g. Studio)."}),"\n",(0,n.jsxs)(i.p,{children:["The feature is inspired by the work in the ",(0,n.jsx)(i.a,{href:"https://www.twilio.com/docs/flex/solutions-library/queued-callback-and-voicemail",children:"Queued Callback and Voicemail"})," Twilio Solution Library, however it has a few key aspects that it improves upon:"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Callbacks and voicemails are placed on the 'voice' channel by default, as it's standard for such work to be threaded in single file with voice calls (i.e. an agent would not want to be handling any of these tasks concurrently with actual voice call tasks). NOTE: The Serverless Functions API we've exposed does allow the task channel to be overridden if desired."}),"\n",(0,n.jsx)(i.li,{children:"There is a Serverless Functions API for creating the callback or voicemail, so you just have to create your UX and then decide when and where to create the callback. No need to peel apart the sample solution for the task creation logic."}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"https://github.com/twilio-professional-services/flex-project-template/blob/main/serverless-functions/src/functions/features/callback-and-voicemail/studio/create-callback.protected.js",children:"Creating a callback or voicemail"})," has a little more resiliency built in as it uses a retry handler provided by our common wrappers provided by this template. Maximum retry attempts are configurable under this framework."]}),"\n",(0,n.jsx)(i.li,{children:"Callbacks and voicemails use a shared set of components and functions, as voicemails are effectively callbacks with a voicemail recording (and possibly a transcription) attached."}),"\n",(0,n.jsx)(i.li,{children:"The callback or voicemail task can be automatically selected after the outbound call back to the contact ends, allowing for a smoother call wrapup process."}),"\n",(0,n.jsxs)(i.li,{children:["A robust wait experience (aka ",(0,n.jsx)(i.code,{children:"waitUrl"})," endpoint) is provided - which uses a more robust Task API query to find the task associated with the Call SID. This addresses the documented scalability issue of the solution library approach - which uses ",(0,n.jsx)(i.code,{children:"EvaluateTaskAttributes"})," for getting the pending task SID (an API that's strictly rate limited to 3 requests per second)."]}),"\n",(0,n.jsx)(i.li,{children:"Voicemail retrieval works with recording media HTTP authentication enabled or disabled"}),"\n",(0,n.jsx)(i.li,{children:"In-queue callback and voicemail requests keep their place in line by using the original task's start time for the callback request"}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"conniertc-user-experience",children:"ConnieRTC User Experience"}),"\n",(0,n.jsx)(i.p,{children:"The vanilla feature without any further customizations will look like this for callbacks"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"alt text",src:a(58242).A+"",width:"1116",height:"893"})}),"\n",(0,n.jsx)(i.p,{children:"Voicemails will look like this"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"alt text",src:a(95228).A+"",width:"1185",height:"978"})}),"\n",(0,n.jsx)(i.p,{children:"And Voicemails created from the Transcription Callback URL will look like this"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"alt text",src:a(25076).A+"",width:"1112",height:"668"})}),"\n",(0,n.jsx)(i.h2,{id:"how-does-it-work",children:"How Does it Work?"}),"\n",(0,n.jsx)(i.p,{children:"The feature works by registering custom ConnieRTC Channels for callbacks and voicemails. These channels are a presentation only layer, on top of the TaskRouter Task Channel, which remains 'voice'."}),"\n",(0,n.jsxs)(i.p,{children:["When the channel is registered, it renders custom components based on the task attribute; ",(0,n.jsx)(i.em,{children:"taskType: callback"})," or ",(0,n.jsx)(i.em,{children:"taskType: voicemail"})]}),"\n",(0,n.jsx)(i.p,{children:"There are assorted serverless functions for creating a callback, re-queueing a callback, and for orchestrating a wait experience that offers an in-queue callback option."}),"\n",(0,n.jsxs)(i.p,{children:["When retrieving voicemail, the ",(0,n.jsx)(i.code,{children:"fetch-voicemail"})," function is invoked. This fetches the recording media using HTTP authentication and returns it base64-encoded to ConnieRTC UI."]}),"\n",(0,n.jsx)(i.h2,{id:"setup-and-dependencies",children:"Setup and Dependencies"}),"\n",(0,n.jsx)(i.p,{children:"Once you've set the flag for the feature in flex-config, and all of that is deployed, you now have a functioning callback and voicemail feature! Now you just need to create some callbacks and/or voicemails via Studio or TwiML."}),"\n",(0,n.jsxs)(i.h3,{id:"creating-a-callback-task-using-the-create-callback-function",children:["Creating a Callback Task Using the ",(0,n.jsx)(i.em,{children:"create-callback"})," Function"]}),"\n",(0,n.jsxs)(i.p,{children:["Creating a callback involves creating a task with at a minimum a number to callback and a number to call from. If you deployed the template with the ",(0,n.jsx)(i.code,{children:"Deploy Terraform?"})," option selected, a Studio flow called ",(0,n.jsx)(i.code,{children:"Template Example Callback Flow"})," has already been created for you, which you can hook up to a phone number in the Twilio Console. Otherwise, a sample setup is shown here in a Studio flow where a number has been wired up to immediately create a callback and hang up."]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"alt text",src:a(19880).A+"",width:"1708",height:"1302"})}),"\n",(0,n.jsx)(i.p,{children:"Here you can see three parameters which are populated from the studio flow"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"numberToCall: {{trigger.call.From}}"})," - the number the customer dialed from"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"numberToCallFrom: {{trigger.call.To}}"})," - the number the customer tried to dial"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"flexFlowSid: {{flow.flow_sid}}"})," - to capture the entry point of this callback, it is stored on the task and is useful for debugging and tracking. (Optional - since this need not be invoked only from Studio)"]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"This serverless function can be used from anywhere, not just the studio flow, to create a callback or voicemail task."}),"\n",(0,n.jsx)(i.h4,{id:"specifying-the-workflow-to-use",children:"Specifying the Workflow to Use"}),"\n",(0,n.jsx)(i.p,{children:'The creation of a task requires a workflow. You may create a custom workflow, that uses some collected data to organize the tasks into different queues or maybe something more complex. You may also just want to use the default "Assign To Anyone" workflow that is spawned on a vanilla ConnieRTC instance.'}),"\n",(0,n.jsxs)(i.p,{children:["Once you have decided which workflow you are using, you can either reference it in the environment file for your serverless-functions (",(0,n.jsx)(i.code,{children:"TWILIO_FLEX_CALLBACK_WORKFLOW_SID"}),"), or you can explicitly provide a ",(0,n.jsx)(i.code,{children:"workflowSid"})," in the call to the function."]}),"\n",(0,n.jsx)(i.admonition,{title:"Tip",type:"tip",children:(0,n.jsxs)(i.p,{children:["The setup scripts will automatically set ",(0,n.jsx)(i.code,{children:"TWILIO_FLEX_CALLBACK_WORKFLOW_SID"}),' if it finds a workflow called "Callback". If Terraform was used to deploy the template, ',(0,n.jsx)(i.a,{href:"https://github.com/twilio-professional-services/flex-project-template/blob/main/infra-as-code/terraform/taskrouter/callback.json",children:"this callback workflow"})," has already been created for you."]})}),"\n",(0,n.jsx)(i.h4,{id:"voicemail-additional-parameters",children:"Voicemail Additional Parameters"}),"\n",(0,n.jsxs)(i.p,{children:["Creating a voicemail involves the same setup as the example above, however the following additional parameters must be passed to the ",(0,n.jsx)(i.em,{children:"create-callback"})," function from a Record Voicemail widget:"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"recordingSid: {{widgets.record_voicemail_1.RecordingSid}}"})," - the recording SID from the Record Voicemail widget"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"recordingUrl: {{widgets.record_voicemail_1.RecordingUrl}}"})," - the recording URL from the Record Voicemail widget"]}),"\n"]}),"\n",(0,n.jsx)(i.h4,{id:"using-transcriptions-in-voicemail-tasks",children:"Using Transcriptions in Voicemail Tasks"}),"\n",(0,n.jsx)(i.p,{children:"If you wish to enable transcriptions and show the transcription text on the voicemail task, you can invoke the create-callback function from the Transcription Callback URL on the Record Voicemail widget. Just be sure to include the required params in the URL. e.g."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"https://custom-flex-extensions-serverless-XXXX-dev.twil.io/features/callback-and-voicemail/studio/create-callback?numberToCall={{trigger.call.From | url_encode}}&numberToCallFrom={{trigger.call.To | url_encode}}&flexFlowSid={{flow.sid}}"})}),"\n",(0,n.jsxs)(i.p,{children:["NOTE: ",(0,n.jsx)(i.code,{children:"RecordingSid"})," and ",(0,n.jsx)(i.code,{children:"RecordingUrl"})," are already part of the transcription callback event, along with ",(0,n.jsx)(i.code,{children:"TranscriptionSid"})," and ",(0,n.jsx)(i.code,{children:"TranscriptionText"}),". The use of the ",(0,n.jsx)(i.code,{children:"url_encode"})," ",(0,n.jsx)(i.a,{href:"https://www.twilio.com/docs/studio/user-guide/liquid-template-language#standard-filters",children:"Liquid Template Filter"})," allows the leading '+' of the to/from phone numbers to be preserved."]}),"\n",(0,n.jsx)(i.p,{children:"If you do go with the transcription approach, the plugin will take care of rendering the transcription text below the playback controls for the recording - per the screenshot animation above."}),"\n",(0,n.jsx)(i.h3,{id:"requesting-a-callback-or-leaving-a-voicemail-while-in-queue",children:"Requesting a Callback or Leaving a Voicemail While In Queue"}),"\n",(0,n.jsx)(i.p,{children:"The above steps assume there's logic in your IVR to allow a customer to request a callback and/or leave a voicemail."}),"\n",(0,n.jsxs)(i.p,{children:['If you also want to offer up a post-IVR "wait experience" to your customers - to allow them to request a callback or leave a voicemail while they are waiting in queue (i.e. while waiting for TaskRouter to route their call task to an agent), the template provides a boilerplate implementation of exactly this in the ',(0,n.jsx)(i.em,{children:"wait-experience"})," Serverless Function."]}),"\n",(0,n.jsxs)(i.p,{children:["Simply set this function's URL as ",(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.em,{children:"Hold Music URL"})})," in the Studio Send to ConnieRTC widget, or as the ",(0,n.jsx)(i.code,{children:"waitUrl"})," if using the ",(0,n.jsx)(i.code,{children:"<Enqueue>"})," TwiML verb. e.g."]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"https://custom-flex-extensions-serverless-XXXX-dev.twil.io/features/callback-and-voicemail/studio/wait-experience"})}),"\n",(0,n.jsxs)(i.p,{children:["The in-queue logic is designed to maintain the initial task's workflow, attributes, etc, so that callback requests follow the same routing logic as the initial task. However, there are customization points within the ",(0,n.jsx)(i.code,{children:"wait-experience"})," function allowing you to override these, such as specifying an alternate workflow or task channel."]}),"\n",(0,n.jsxs)(i.h4,{id:"noteworthy-points-regarding-the-wait-experience-logic",children:["Noteworthy Points Regarding the ",(0,n.jsx)(i.em,{children:"wait-experience"})," Logic"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsxs)(i.strong,{children:["Creating a callback (or voicemail) via the ",(0,n.jsx)(i.em,{children:"wait-experience"})," logic will ",(0,n.jsx)(i.em,{children:"retain"})," your place in queue by default"]})," - when we create a new task representing the callback or voicemail request, by default we set the ",(0,n.jsx)(i.code,{children:"virtualStartTime"})," parameter to the original task's ",(0,n.jsx)(i.code,{children:"dateCreated"})," timestamp. This effectively orders the new task within the queue the same as the original task. This may optionally be disabled within the options under ",(0,n.jsx)(i.code,{children:"wait-experience.protected.js"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"We are able to set useful reporting attributes by programmatically canceling the original call task when a customer chooses to request a callback (or leave a voicemail)"})," - rather than letting the task auto-cancel via native TaskRouter orchestration when the call ends. This includes a custom cancelation reason, as well as marking the task as ",(0,n.jsx)(i.code,{children:'abandoned: "Follow-Up"'})," in the ",(0,n.jsx)(i.code,{children:"conversations"})," attribute - which prevents ConnieRTC Insights from including this call in any Abandoned metrics (see ",(0,n.jsx)(i.a,{href:"https://www.twilio.com/docs/flex/end-user-guide/insights/abandoned-conversations#abandoned",children:"Track Abandoned Conversations in ConnieRTC Insights"}),")."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Cancelling the ongoing call task programmatically also prevents the call task reaching an agent when the customer has already committed to leaving a voicemail (or requesting a callback)"}),". We leave this task cancellation until the very last possible moment - to maximize the opportunity for an agent to answer."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"It is essential to lookup and retain the task SID of the ongoing call task immediately - so that we can cancel it later and make changes to its reporting attributes as mentioned above."})," Our implementation (see ",(0,n.jsx)(i.em,{children:"getPendingTaskByCallSid()"}),") immediately retrieves the top 20 most recent ",(0,n.jsx)(i.code,{children:"pending"})," or ",(0,n.jsx)(i.code,{children:"reserved"})," (i.e. not-yet-accepted) tasks on the provided ",(0,n.jsx)(i.code,{children:"workflowSid"}),", and finds the one with the matching ",(0,n.jsx)(i.code,{children:"call_sid"})," attribute. Since this lookup occurs immediately on entering our configured ",(0,n.jsx)(i.code,{children:"waitUrl"})," TwiML application - milliseconds after the associated task is created - this approach works very reliably and has been extensively load tested (100% success over a 1000 call test at a rate of 30 calls per second)."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsxs)(i.strong,{children:["If for some reason the ",(0,n.jsx)(i.em,{children:"wait-experience"})," logic fails to find the task for the ongoing call's call SID, it will fail gracefully"]})," by informing the customer that the callback and voicemail capability is currently unavailable."]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},58242:(e,i,a)=>{a.d(i,{A:()=>t});const t=a.p+"assets/images/flex-user-experience-c7a981f14bfa4e96545a4138fc1d1ee7.gif"},95228:(e,i,a)=>{a.d(i,{A:()=>t});const t=a.p+"assets/images/flex-user-experience-vm-6fd9b13e787c44a5ceb7194a20549f69.gif"}}]);