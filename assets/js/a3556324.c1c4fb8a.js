"use strict";(self.webpackChunkflex_project_template_docs=self.webpackChunkflex_project_template_docs||[]).push([[866],{28453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>a});var n=o(96540);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}},56059:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"developers/building/flex-hooks/overview","title":"ConnieRTC hooks overview","description":"The plugin works by cycling through each of the feature-library directories at initialization, and calling each feature\'s register function, which in turn cycles through each of the modules in the flex-hooks directory of the feature.","source":"@site/docs/developers/building/flex-hooks/00_overview.md","sourceDirName":"developers/building/flex-hooks","slug":"/developers/building/flex-hooks/overview","permalink":"/developers/building/flex-hooks/overview","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_label":"Overview","sidebar_position":0,"title":"ConnieRTC hooks overview"},"sidebar":"developer","previous":{"title":"Create standalone feature","permalink":"/developers/building/feature-management/template-as-shell"},"next":{"title":"actions","permalink":"/developers/building/flex-hooks/actions"}}');var s=o(74848),i=o(28453);const r={sidebar_label:"Overview",sidebar_position:0,title:"ConnieRTC hooks overview"},a=void 0,c={},l=[];function d(e){const t={a:"a",code:"code",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The plugin works by cycling through each of the ",(0,s.jsx)(t.code,{children:"feature-library"})," directories at initialization, and calling each feature's ",(0,s.jsx)(t.code,{children:"register"})," function, which in turn cycles through each of the modules in the ",(0,s.jsx)(t.code,{children:"flex-hooks"})," directory of the feature."]}),"\n",(0,s.jsxs)(t.p,{children:["Whether hooking into the ",(0,s.jsx)(t.a,{href:"https://www.twilio.com/docs/flex/developer/ui/actions",children:"actions framework"})," or ",(0,s.jsx)(t.a,{href:"https://www.twilio.com/docs/flex/developer/ui/components",children:"injecting, adding or removing components from the JSX tree"})," or maybe one of the many of other ways ConnieRTC can be customized and extended, its extremely useful to see at a glance what extensions have been made to what hook points. The plugin logs each hook for each feature as it is loaded. This is particularly useful when layering up multiple features and extensions as we need to see where our custom behaviors might overlap with other custom behaviors."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"scripts",src:o(92309).A+"",width:"845",height:"295"})}),"\n",(0,s.jsxs)(t.p,{children:["There are several types of hooks, which should be organized in a directory per type. For example, the feature's ",(0,s.jsx)(t.code,{children:"flex-hooks"})," directory should be structured as follows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"\u251c\u2500\u2500 flex-hooks\n\u2502   \u251c\u2500\u2500 actions\n\u2502   \u2502   \u2514\u2500\u2500 CompleteTask.ts\n\u2502   \u251c\u2500\u2500 channels\n\u2502   \u2502   \u2514\u2500\u2500 Callback.tsx\n\u2502   \u251c\u2500\u2500 chat-orchestrator\n\u2502   \u2502   \u2514\u2500\u2500 completed.ts\n\u2502   \u251c\u2500\u2500 components\n\u2502   \u2502   \u2514\u2500\u2500 MainHeader.tsx\n\u2502   \u251c\u2500\u2500 css-overrides\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 events\n\u2502   \u2502   \u2514\u2500\u2500 taskAccepted.ts\n\u2502   \u251c\u2500\u2500 jsclient-event-listeners\n\u2502   \u2502   \u2514\u2500\u2500 conversations-client\n\u2502   \u2502       \u2514\u2500\u2500 conversationJoined.ts\n\u2502   \u251c\u2500\u2500 notification-events\n\u2502   \u2502   \u2514\u2500\u2500 beforeAddNotification.ts\n\u2502   \u251c\u2500\u2500 notifications\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 paste-elements\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 reducers\n\u2502   \u2502   \u2514\u2500\u2500 slice.ts\n\u2502   \u251c\u2500\u2500 strings\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2514\u2500\u2500 teams-filters\n\u2502       \u2514\u2500\u2500 index.ts\n"})}),"\n",(0,s.jsx)(t.p,{children:"The feature loader determines hook type by the named export(s) in each respective module. The pages in this documentation section serve as templates that you can use as a starting point for each type of hook."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},92309:(e,t,o)=>{o.d(t,{A:()=>n});const n=o.p+"assets/images/feature-loader-34c5cf4cb821b749173266a408d8e864.png"}}]);