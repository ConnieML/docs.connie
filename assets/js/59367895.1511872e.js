"use strict";(self.webpackChunkflex_project_template_docs=self.webpackChunkflex_project_template_docs||[]).push([[625],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var s=i(96540);const o={},t=s.createContext(o);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},31177:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"developers/general/debugging-best-practices","title":"Connie Debugging Best Practices & Emergency Response","description":"Overview","source":"@site/docs/developers/general/debugging-best-practices.md","sourceDirName":"developers/general","slug":"/developers/general/debugging-best-practices","permalink":"/developers/general/debugging-best-practices","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Debugging Best Practices","sidebar_position":2,"title":"Connie Debugging Best Practices & Emergency Response"},"sidebar":"tutorialSidebar","previous":{"title":"Updating Documentation","permalink":"/developers/updating-docs"},"next":{"title":"Emergency Diagnostics","permalink":"/developers/general/emergency-diagnostic-commands"}}');var o=i(74848),t=i(28453);const l={sidebar_label:"Debugging Best Practices",sidebar_position:2,title:"Connie Debugging Best Practices & Emergency Response"},r="Connie Debugging Best Practices & Emergency Response",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Emergency Response Protocol",id:"emergency-response-protocol",level:2},{value:"\ud83d\udea8 When Connie Features Break in Production",id:"-when-connie-features-break-in-production",level:3},{value:"Mandatory Logging Standards",id:"mandatory-logging-standards",level:2},{value:"Required Logging Pattern for ALL Functions",id:"required-logging-pattern-for-all-functions",level:3},{value:"Logging Standards by Function Type",id:"logging-standards-by-function-type",level:3},{value:"Voice Functions",id:"voice-functions",level:4},{value:"Email Functions",id:"email-functions",level:4},{value:"API Integration Functions",id:"api-integration-functions",level:4},{value:"Environment-Specific Logging",id:"environment-specific-logging",level:2},{value:"Development vs Production Logging",id:"development-vs-production-logging",level:3},{value:"Diagnostic Commands Reference",id:"diagnostic-commands-reference",level:2},{value:"Essential Twilio CLI Commands",id:"essential-twilio-cli-commands",level:3},{value:"Advanced Debugging Commands",id:"advanced-debugging-commands",level:3},{value:"Testing &amp; Validation",id:"testing--validation",level:2},{value:"Pre-Deployment Testing Checklist",id:"pre-deployment-testing-checklist",level:3},{value:"Local Testing Commands",id:"local-testing-commands",level:3},{value:"Common Debugging Scenarios",id:"common-debugging-scenarios",level:2},{value:"Scenario 1: &quot;Option not available at this time&quot;",id:"scenario-1-option-not-available-at-this-time",level:3},{value:"Scenario 2: Email notifications not sending",id:"scenario-2-email-notifications-not-sending",level:3},{value:"Scenario 3: Studio Flow not executing",id:"scenario-3-studio-flow-not-executing",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:2},{value:"Key Metrics to Monitor",id:"key-metrics-to-monitor",level:3},{value:"Alert Thresholds",id:"alert-thresholds",level:3},{value:"Documentation Standards",id:"documentation-standards",level:2},{value:"Function Documentation Template",id:"function-documentation-template",level:3},{value:"Troubleshooting Decision Tree",id:"troubleshooting-decision-tree",level:2},{value:"Emergency Contact Protocol",id:"emergency-contact-protocol",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"connie-debugging-best-practices--emergency-response",children:"Connie Debugging Best Practices & Emergency Response"})}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"This guide provides comprehensive debugging strategies specifically for Connie serverless functions and features. Following these practices will prevent debugging emergencies and enable rapid resolution when issues occur."}),"\n",(0,o.jsx)(n.h2,{id:"emergency-response-protocol",children:"Emergency Response Protocol"}),"\n",(0,o.jsx)(n.h3,{id:"-when-connie-features-break-in-production",children:"\ud83d\udea8 When Connie Features Break in Production"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Step 1: Immediate Diagnostics (First 2 minutes)"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Primary diagnostic tool - START HERE\ntwilio serverless:logs --service-sid ZS906734499c94e8fb7c2eca7c708f8f6b --tail\n\n# Check recent call activity\ntwilio api:core:calls:list --limit 5 --status failed\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Step 2: Function-Specific Investigation"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Get recent function executions\ntwilio serverless:logs --service-sid ZS906734499c94e8fb7c2eca7c708f8f6b --function-sid [FUNCTION_SID] --limit 20\n\n# Check specific function health\ncurl -X POST https://[DEPLOYMENT_DOMAIN]/[FUNCTION_PATH] \\\n  -d "CallSid=test&mode=debug" \\\n  -H "Content-Type: application/x-www-form-urlencoded"\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Step 3: Studio Flow Analysis"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Check flow executions\ntwilio api:studio:v2:flows:executions:list --flow-sid [FLOW_SID] --limit 10\n\n# Get execution details\ntwilio api:studio:v2:flows:executions:fetch --flow-sid [FLOW_SID] --sid [EXECUTION_SID]\n"})}),"\n",(0,o.jsx)(n.h2,{id:"mandatory-logging-standards",children:"Mandatory Logging Standards"}),"\n",(0,o.jsx)(n.h3,{id:"required-logging-pattern-for-all-functions",children:"Required Logging Pattern for ALL Functions"}),"\n",(0,o.jsx)(n.p,{children:"Every Connie serverless function MUST implement this logging pattern:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"exports.handler = async function(context, event, callback) {\n  // 1. ENTRY LOGGING (Always include)\n  console.log('=== [FUNCTION_NAME] DEBUG START ===');\n  console.log('Event parameters:', JSON.stringify(event, null, 2));\n  console.log('Context domain:', context.DOMAIN_NAME);\n  console.log('Timestamp:', new Date().toISOString());\n  \n  try {\n    // 2. PARAMETER VALIDATION LOGGING\n    console.log('Validating required parameters...');\n    const requiredParams = ['CallSid', 'From', 'To'];\n    for (const param of requiredParams) {\n      if (!event[param]) {\n        console.error(`VALIDATION ERROR: Missing ${param}`);\n        return callback(new Error(`Missing required parameter: ${param}`));\n      }\n    }\n    console.log('Parameter validation passed');\n    \n    // 3. BUSINESS LOGIC LOGGING\n    console.log('Processing mode:', event.mode || 'initial');\n    console.log('Caller info:', { from: event.From, to: event.To, callSid: event.CallSid });\n    \n    // 4. EXTERNAL API LOGGING (if applicable)\n    if (makingAPICall) {\n      console.log('Making API call to:', apiUrl);\n      console.log('API request headers:', headers);\n      // Log response when received\n      console.log('API response status:', response.status);\n      console.log('API response data:', response.data);\n    }\n    \n    // 5. WORKFLOW/QUEUE LOGGING (if applicable)\n    if (workflowSid) {\n      console.log('Using workflow SID:', workflowSid);\n      console.log('Task attributes:', JSON.stringify(taskAttributes, null, 2));\n    }\n    \n    // Your function logic here...\n    \n    // 6. SUCCESS LOGGING\n    console.log('Function completed successfully');\n    console.log('Result:', JSON.stringify(result, null, 2));\n    console.log('=== [FUNCTION_NAME] DEBUG END ===');\n    return callback(null, result);\n    \n  } catch (error) {\n    // 7. ERROR LOGGING (Critical!)\n    console.error('=== [FUNCTION_NAME] ERROR ===');\n    console.error('Error message:', error.message);\n    console.error('Error stack:', error.stack);\n    console.error('Event data:', JSON.stringify(event, null, 2));\n    console.error('Context data:', JSON.stringify({\n      domain: context.DOMAIN_NAME,\n      accountSid: context.ACCOUNT_SID,\n      timestamp: new Date().toISOString()\n    }, null, 2));\n    console.error('=== ERROR END ===');\n    \n    return callback(error);\n  }\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"logging-standards-by-function-type",children:"Logging Standards by Function Type"}),"\n",(0,o.jsx)(n.h4,{id:"voice-functions",children:"Voice Functions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// TwiML generation logging\nconsole.log('Generating TwiML response...');\nconst twiml = new Twilio.twiml.VoiceResponse();\nconsole.log('TwiML before modifications:', twiml.toString());\n\n// Studio Flow transition logging\nconsole.log('Studio Flow transition:', {\n  flowSid: event.FlowSid,\n  executionSid: event.ExecutionSid,\n  stepSid: event.StepSid\n});\n\n// Queue/Workflow logging\nconsole.log('TaskRouter configuration:', {\n  workspaceSid: context.TWILIO_FLEX_WORKSPACE_SID,\n  workflowSid: enqueuedWorkflowSid,\n  queueName: queueName\n});\n"})}),"\n",(0,o.jsx)(n.h4,{id:"email-functions",children:"Email Functions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Mailgun API logging\nconsole.log('Mailgun API request:', {\n  url: `https://api.mailgun.net/v3/${context.MAILGUN_DOMAIN}/messages`,\n  domain: context.MAILGUN_DOMAIN,\n  recipients: recipients,\n  subject: subject\n});\n\n// Email delivery logging\nconsole.log('Email sent successfully:', {\n  messageId: response.id,\n  message: response.message,\n  recipients: recipients.length\n});\n\n// Attachment processing logging\nif (attachments.length > 0) {\n  console.log('Processing attachments:', attachments.map(a => ({\n    filename: a.filename,\n    size: a.size,\n    contentType: a.contentType\n  })));\n}\n"})}),"\n",(0,o.jsx)(n.h4,{id:"api-integration-functions",children:"API Integration Functions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// External API call logging\nconsole.log('External API call initiated:', {\n  method: 'POST',\n  url: apiEndpoint,\n  headers: sanitizedHeaders, // Remove sensitive data\n  requestSize: JSON.stringify(requestBody).length\n});\n\n// Authentication logging\nconsole.log('API authentication status:', {\n  authenticated: !!authToken,\n  tokenType: 'Bearer',\n  expiresAt: tokenExpiry\n});\n\n// Response analysis logging\nconsole.log('API response analysis:', {\n  status: response.status,\n  contentType: response.headers['content-type'],\n  responseSize: response.data ? JSON.stringify(response.data).length : 0,\n  successful: response.status >= 200 && response.status < 300\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"environment-specific-logging",children:"Environment-Specific Logging"}),"\n",(0,o.jsx)(n.h3,{id:"development-vs-production-logging",children:"Development vs Production Logging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Use environment variables to control verbosity\nconst isLocalDev = context.ENABLE_LOCAL_LOGGING === 'true';\nconst isDebugMode = context.DEBUG_MODE === 'true';\n\n// Verbose logging for development\nif (isLocalDev) {\n  console.log('VERBOSE: Detailed parameter analysis...', {\n    eventKeys: Object.keys(event),\n    contextKeys: Object.keys(context),\n    memoryUsage: process.memoryUsage()\n  });\n}\n\n// Debug mode for specific troubleshooting\nif (isDebugMode) {\n  console.log('DEBUG: Deep function analysis...', {\n    functionName: context.FUNCTION_NAME,\n    functionVersion: context.FUNCTION_VERSION,\n    executionEnvironment: context.EXECUTION_ENVIRONMENT\n  });\n}\n\n// Always log critical events regardless of environment\nconsole.log('CRITICAL: Task creation result:', {\n  taskSid: task.sid,\n  queueSid: task.queueSid,\n  workflowSid: task.workflowSid,\n  attributes: task.attributes\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"diagnostic-commands-reference",children:"Diagnostic Commands Reference"}),"\n",(0,o.jsx)(n.h3,{id:"essential-twilio-cli-commands",children:"Essential Twilio CLI Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Real-time function logs (PRIMARY DIAGNOSTIC TOOL)\ntwilio serverless:logs --service-sid ZS906734499c94e8fb7c2eca7c708f8f6b --tail\n\n# Function-specific logs\ntwilio serverless:logs --service-sid ZS906734499c94e8fb7c2eca7c708f8f6b --function-sid [FUNCTION_SID]\n\n# Studio Flow execution analysis\ntwilio api:studio:v2:flows:executions:list --flow-sid [FLOW_SID] --limit 10\n\n# Recent call analysis\ntwilio api:core:calls:list --limit 10 --status completed\ntwilio api:core:calls:list --limit 10 --status failed\n\n# TaskRouter debugging\ntwilio api:taskrouter:v1:workspaces:tasks:list --workspace-sid WS7d3bcedb08a791b201aa4ec4fdadcfe6 --limit 10\ntwilio api:taskrouter:v1:workspaces:workflows:list --workspace-sid WS7d3bcedb08a791b201aa4ec4fdadcfe6\n\n# Account activity overview\ntwilio api:core:accounts:fetch --sid [ACCOUNT_SID]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"advanced-debugging-commands",children:"Advanced Debugging Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Specific call investigation\ntwilio api:core:calls:fetch --sid [CALL_SID]\ntwilio api:core:calls:recordings:list --call-sid [CALL_SID]\n\n# Studio Flow deep dive\ntwilio api:studio:v2:flows:executions:steps:list --flow-sid [FLOW_SID] --execution-sid [EXECUTION_SID]\n\n# TaskRouter task details\ntwilio api:taskrouter:v1:workspaces:tasks:fetch --workspace-sid [WORKSPACE_SID] --sid [TASK_SID]\n\n# Function deployment verification\ntwilio serverless:functions:list --service-sid ZS906734499c94e8fb7c2eca7c708f8f6b\ntwilio serverless:environments:list --service-sid ZS906734499c94e8fb7c2eca7c708f8f6b\n"})}),"\n",(0,o.jsx)(n.h2,{id:"testing--validation",children:"Testing & Validation"}),"\n",(0,o.jsx)(n.h3,{id:"pre-deployment-testing-checklist",children:"Pre-Deployment Testing Checklist"}),"\n",(0,o.jsx)(n.p,{children:"Before deploying ANY Connie feature:"}),"\n",(0,o.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,o.jsx)(n.strong,{children:"Entry/exit logging present"})," - Function logs start and completion"]}),"\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,o.jsx)(n.strong,{children:"Error handling with full context"})," - Comprehensive error logging"]}),"\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,o.jsx)(n.strong,{children:"Parameter validation with logging"})," - Log all validation steps"]}),"\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,o.jsx)(n.strong,{children:"Business logic steps logged"})," - Key decision points logged"]}),"\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,o.jsx)(n.strong,{children:"External API calls logged"})," - Full request/response logging"]}),"\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,o.jsx)(n.strong,{children:"Success/failure states logged"})," - Clear outcome logging"]}),"\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,o.jsx)(n.strong,{children:"Environment variables validated"})," - Required config present"]}),"\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,o.jsx)(n.strong,{children:"Function responds to test calls"})," - Basic functionality verified"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"local-testing-commands",children:"Local Testing Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Test function locally\ncd serverless-functions\nnpm run start\n\n# Test specific function endpoint\ncurl -X POST http://localhost:3001/features/[FEATURE_NAME]/[FUNCTION_NAME] \\\n  -d "CallSid=test&From=%2B15551234567&To=%2B15559876543" \\\n  -H "Content-Type: application/x-www-form-urlencoded"\n\n# Test with debug parameters\ncurl -X POST http://localhost:3001/features/[FEATURE_NAME]/[FUNCTION_NAME] \\\n  -d "CallSid=test&mode=debug&ENABLE_LOCAL_LOGGING=true" \\\n  -H "Content-Type: application/x-www-form-urlencoded"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"common-debugging-scenarios",children:"Common Debugging Scenarios"}),"\n",(0,o.jsx)(n.h3,{id:"scenario-1-option-not-available-at-this-time",children:'Scenario 1: "Option not available at this time"'}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Symptoms"}),": Callers hear this message when trying to use voicemail or callback features"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Investigation Steps"}),":"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Check workflow SID configuration in Studio Flow"}),"\n",(0,o.jsx)(n.li,{children:"Verify workflow exists and is active"}),"\n",(0,o.jsx)(n.li,{children:"Check function logs for workflow lookup errors"}),"\n",(0,o.jsx)(n.li,{children:"Validate TaskRouter workspace configuration"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Common Causes"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Hardcoded workflow SID in wrong environment"}),"\n",(0,o.jsx)(n.li,{children:"Workflow disabled or deleted"}),"\n",(0,o.jsx)(n.li,{children:"Queue configuration mismatch"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"scenario-2-email-notifications-not-sending",children:"Scenario 2: Email notifications not sending"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Symptoms"}),": Voicemails recorded but no email notifications sent"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Investigation Steps"}),":"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Check Mailgun API credentials and domain configuration"}),"\n",(0,o.jsx)(n.li,{children:"Verify function logs for email sending attempts"}),"\n",(0,o.jsx)(n.li,{children:"Test Mailgun API independently"}),"\n",(0,o.jsx)(n.li,{children:"Check email attachment processing"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Common Causes"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Wrong Mailgun API key (private vs domain-specific)"}),"\n",(0,o.jsx)(n.li,{children:"Domain not verified in Mailgun"}),"\n",(0,o.jsx)(n.li,{children:"Attachment size limits exceeded"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"scenario-3-studio-flow-not-executing",children:"Scenario 3: Studio Flow not executing"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Symptoms"}),": Calls not reaching Flex or functions"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Investigation Steps"}),":"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Verify phone number webhook configuration"}),"\n",(0,o.jsx)(n.li,{children:"Check Studio Flow publication status"}),"\n",(0,o.jsx)(n.li,{children:"Review Flow execution logs"}),"\n",(0,o.jsx)(n.li,{children:"Validate webhook URL format"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Common Causes"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Phone number not configured with Studio Flow"}),"\n",(0,o.jsx)(n.li,{children:"Flow in draft status, not published"}),"\n",(0,o.jsx)(n.li,{children:"Invalid webhook URLs in Flow widgets"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,o.jsx)(n.h3,{id:"key-metrics-to-monitor",children:"Key Metrics to Monitor"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Function execution timing\nconst startTime = Date.now();\n// ... function logic ...\nconst executionTime = Date.now() - startTime;\nconsole.log('Function execution time:', executionTime, 'ms');\n\n// Memory usage monitoring\nconsole.log('Memory usage:', process.memoryUsage());\n\n// API response time tracking\nconst apiStartTime = Date.now();\nconst response = await apiCall();\nconst apiResponseTime = Date.now() - apiStartTime;\nconsole.log('API response time:', apiResponseTime, 'ms');\n"})}),"\n",(0,o.jsx)(n.h3,{id:"alert-thresholds",children:"Alert Thresholds"}),"\n",(0,o.jsx)(n.p,{children:"Set up monitoring for:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Function execution time > 10 seconds"}),"\n",(0,o.jsx)(n.li,{children:"Memory usage > 80% of limit"}),"\n",(0,o.jsx)(n.li,{children:"API response time > 5 seconds"}),"\n",(0,o.jsx)(n.li,{children:"Error rate > 5% over 10 minutes"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"documentation-standards",children:"Documentation Standards"}),"\n",(0,o.jsx)(n.h3,{id:"function-documentation-template",children:"Function Documentation Template"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"/**\n * FUNCTION: [Function Name]\n * PURPOSE: [What this function does]\n * TRIGGER: [How this function is called]\n * \n * REQUIRED PARAMETERS:\n * - CallSid: Twilio call identifier\n * - From: Caller phone number\n * - To: Called phone number\n * \n * OPTIONAL PARAMETERS:\n * - mode: Operation mode (callback/voicemail)\n * \n * EXTERNAL DEPENDENCIES:\n * - Mailgun API for email notifications\n * - TaskRouter for queue management\n * \n * CRITICAL LOGGING:\n * - All parameter validation\n * - API calls and responses\n * - Task creation results\n * - Error conditions with full context\n * \n * EMERGENCY CONTACTS:\n * - Primary: [Contact info]\n * - Secondary: [Contact info]\n */\n"})}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting-decision-tree",children:"Troubleshooting Decision Tree"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"1. Is the function receiving requests?\n   \u251c\u2500\u2500 NO \u2192 Check phone number webhook configuration\n   \u2514\u2500\u2500 YES \u2192 Continue to step 2\n\n2. Are parameters being passed correctly?\n   \u251c\u2500\u2500 NO \u2192 Check Studio Flow widget configuration\n   \u2514\u2500\u2500 YES \u2192 Continue to step 3\n\n3. Is parameter validation passing?\n   \u251c\u2500\u2500 NO \u2192 Review required parameter list and validation logic\n   \u2514\u2500\u2500 YES \u2192 Continue to step 4\n\n4. Are external API calls succeeding?\n   \u251c\u2500\u2500 NO \u2192 Check API credentials and network connectivity\n   \u2514\u2500\u2500 YES \u2192 Continue to step 5\n\n5. Is business logic executing correctly?\n   \u251c\u2500\u2500 NO \u2192 Review function logic and error handling\n   \u2514\u2500\u2500 YES \u2192 Check result handling and callback execution\n"})}),"\n",(0,o.jsx)(n.h2,{id:"emergency-contact-protocol",children:"Emergency Contact Protocol"}),"\n",(0,o.jsx)(n.p,{children:"When debugging critical issues:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Document everything"})," - Log review process and findings"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Preserve evidence"})," - Save logs and error messages"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Communicate status"})," - Update stakeholders on progress"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Follow up"})," - Post-mortem analysis and prevention"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"Following these debugging practices ensures:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Rapid emergency response (minutes vs hours/days)"}),"\n",(0,o.jsx)(n.li,{children:"Comprehensive diagnostic information"}),"\n",(0,o.jsx)(n.li,{children:"Consistent troubleshooting approach"}),"\n",(0,o.jsx)(n.li,{children:"Prevention of future emergencies"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Remember"}),": The voicemail emergency was solved by comprehensive logging. Without proper logging, emergencies take days to solve. With proper logging, they take minutes."]}),"\n",(0,o.jsx)(n.p,{children:'Every Connie feature must be "emergency-ready" with comprehensive diagnostic logging.'})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);